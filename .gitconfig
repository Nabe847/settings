[user]
    name = <TODO>
    email = <TODO>
    editor = code
[color]
    status = auto
    diff = auto
    branch = auto
    interactive = auto
    grep = auto
    ui = auto
[alias]
    alias = "config --get-regexp ^alias"
    br    = "branch"
    cm    = "commit -m"
    co    = "checkout"
    dn    = "diff --name-only"
    ls    = "ls-tree --full-tree -r --name-only HEAD"
    st    = "status --short --branch"
    title = "log --no-merges --pretty=format:%s"
    one   = "log --no-merges --date=short --oneline"
    open  = "!hub browse"

    ps = "!git push origin $(git rev-parse --abbrev-ref HEAD)"
    pl = "!git pull origin $(git rev-parse --abbrev-ref HEAD)"
    hist = log --pretty=format:\"%Cgreen%h %Creset%cd %Cblue[%cn] %Creset%s%C(yellow)%d%C(reset)\" --graph --date=relative --decorate --all
    llog = log --graph --name-status --pretty=format:\"%C(red)%h %C(reset)(%cd) %C(green)%an %Creset%s %C(yellow)%d%Creset\" --date=relative
    type = cat-file -t
    dump = cat-file -p
    find = "!f() { git log --pretty=format:\"%h %cd [%cn] %s%d\" --date=relative -S'pretty' -S\"$@\" | peco | awk '{print $1}' | xargs -I {} git diff {}^ {}; }; f"
    # edit conflicted file on merge
    edit-unmerged = "!f() { git ls-files --unmerged | cut -f2 | sort -u ; }; vim `f`"
    # add conflicted file on merge
    add-unmerged = "!f() { git ls-files --unmerged | cut -f2 | sort -u ; }; git add `f`"
[hub]
    protocol = https
